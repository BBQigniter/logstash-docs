[[plugins-filters-truncate]]
=== truncate

Version: 1.0.0
Released on: 2016-11-29
https://github.com/logstash-plugins/logstash-filter-truncate/blob/master/CHANGELOG.md#100[Changelog]
Compatible: 5.1.2, 5.1.1, 5.0.0, 2.4.1, 2.4.0


NOTE: This plugin does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-truncate`.


Allows you to truncate fields longer than a given length.

This truncates on bytes values, not character count.  In practice, this
should mean that the truncated length is somewhere between `length_bytes` and
`length_bytes - 6` (UTF-8 supports up to 6-byte characters).

&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
truncate {
    length_bytes => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-truncate-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-truncate-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-truncate-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-truncate-fields>> |<<string,string>>|No|
| <<plugins-filters-truncate-id>> |<<string,string>>|No|
| <<plugins-filters-truncate-length_bytes>> |<<number,number>>|Yes|
| <<plugins-filters-truncate-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-truncate-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-truncate-remove_tag>> |<<array,array>>|No|`[]`
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-truncate-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      truncate {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      truncate {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-truncate-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      truncate {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      truncate {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-truncate-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-truncate-fields]]
===== `fields` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

A list of fieldrefs to truncate if they are too long.

If not specified, the default behavior will be to attempt truncation on all
strings in the event. This default behavior could be computationally
expensive, so if you know exactly which fields you wish to truncate, it is
advised that you be specific and configure the fields you want truncated.

Special behaviors for non-string fields:

* Numbers: No action
* Array: this plugin will attempt truncation on all elements of that array.
* Hash: truncate will try all values of the hash (recursively, if this hash
contains other hashes).

[[plugins-filters-truncate-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin instance, this `ID` is used for tracking
information for a specific configuration of the plugin.

```
output {
 stdout {
   id => "ABC"
 }
}
```

If you don't explicitely set this variable Logstash will generate a unique name.

[[plugins-filters-truncate-length_bytes]]
===== `length_bytes` 

  * This is a required setting.
  * Value type is <<number,number>>
  * There is no default value for this setting.

Fields over this length will be truncated to this length.

Truncation happens from the end of the text (the start will be kept).

As an example, if you set `length_bytes => 10` and a field contains "hello
world, how are you?", then this field will be truncated and have this value:
"hello worl"

[[plugins-filters-truncate-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-truncate-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      truncate {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      truncate {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-truncate-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      truncate {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      truncate {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.


