[[plugins-filters-split]]
=== split

Version: 3.1.1
Released on: 2016-07-14
https://github.com/logstash-plugins/logstash-filter-split/blob/master/CHANGELOG.md#311[Changelog]
Compatible: 5.1.1.1, 5.0.0, 2.4.1, 2.4.0, 2.3.4



The split filter clones an event by splitting one of its fields and
placing each value resulting from the split into a clone of the original
event. The field being split can either be a string or an array.

An example use case of this filter is for taking output from the
<<plugins-inputs-exec,exec input plugin>> which emits one event for
the whole output of a command and splitting that output by newline -
making each line an event.

Split filter can also be used to split array fields in events into individual events.
A very common pattern in JSON & XML is to make use of lists to group data together.

For example, a json structure like this:

[source,js]
----------------------------------
{ field1: ...,
 results: [
   { result ... },
   { result ... },
   { result ... },
   ...
] }
----------------------------------

The split filter can be used on the above data to create separate events for each value of `results` field

[source,js]
----------------------------------
filter {
 split {
   field => "results"
 }
}
----------------------------------

The end result of each split is a complete copy of the event
with only the current split section of the given field changed.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
split {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-split-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-split-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-split-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-split-field>> |<<string,string>>|No|`"message"`
| <<plugins-filters-split-id>> |<<string,string>>|No|
| <<plugins-filters-split-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-split-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-split-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-split-target>> |<<string,string>>|No|
| <<plugins-filters-split-terminator>> |<<string,string>>|No|`"\n"`
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-split-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      split {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      split {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-split-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      split {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      split {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-split-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-split-field]]
===== `field` 

  * Value type is <<string,string>>
  * Default value is `"message"`

The field which value is split by the terminator.  
Can be a multiline message or the ID of an array.  
Nested arrays are referenced like: "[object_id][array_id]"

[[plugins-filters-split-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin instance, this `ID` is used for tracking
information for a specific configuration of the plugin.

```
output {
 stdout {
   id => "ABC"
 }
}
```

If you don't explicitely set this variable Logstash will generate a unique name.

[[plugins-filters-split-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-split-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      split {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      split {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-split-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      split {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      split {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-split-target]]
===== `target` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

The field within the new event which the value is split into.
If not set, the target field defaults to split field name.

[[plugins-filters-split-terminator]]
===== `terminator` 

  * Value type is <<string,string>>
  * Default value is `"\n"`

The string to split on. This is usually a line terminator, but can be any
string. If you are splitting a JSON array into multiple events, you can ignore this field.


