[[plugins-filters-useragent]]
=== useragent



Parse user agent strings into structured data based on BrowserScope data

UserAgent filter, adds information about user agent like family, operating
system, version, and device

Logstash releases ship with the regexes.yaml database made available from
ua-parser with an Apache 2.0 license. For more details on ua-parser, see
<https://github.com/tobie/ua-parser/>.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
useragent {
    source => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-useragent-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-useragent-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-useragent-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-useragent-prefix>> |<<string,string>>|No|`""`
| <<plugins-filters-useragent-regexes>> |<<string,string>>|No|
| <<plugins-filters-useragent-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-useragent-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-useragent-source>> |<<string,string>>|Yes|
| <<plugins-filters-useragent-target>> |<<string,string>>|No|
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-useragent-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
-----
    filter {
      useragent {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple fields at once:
    filter {
      useragent {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-useragent-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      useragent {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also add multiple tags at once:
    filter {
      useragent {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-useragent-exclude_tags]]
===== `exclude_tags`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<array,array>>
  * Default value is `[]`

Only handle events without any of these tags.
Optional.

[[plugins-filters-useragent-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-useragent-prefix]]
===== `prefix` 

  * Value type is <<string,string>>
  * Default value is `""`

A string to prepend to all of the extracted keys

[[plugins-filters-useragent-regexes]]
===== `regexes` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

`regexes.yaml` file to use

If not specified, this will default to the `regexes.yaml` that ships
with logstash.

You can find the latest version of this here:
<https://github.com/tobie/ua-parser/blob/master/regexes.yaml>

[[plugins-filters-useragent-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}

Example:
[source,ruby]
-----
    filter {
      useragent {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple fields at once:
    filter {
      useragent {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-useragent-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
-----
    filter {
      useragent {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
-----

[source,ruby]
-----
    # You can also remove multiple tags at once:
    filter {
      useragent {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }
-----

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-useragent-source]]
===== `source` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

The field containing the user agent string. If this field is an
array, only the first value will be used.

[[plugins-filters-useragent-tags]]
===== `tags`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<array,array>>
  * Default value is `[]`

Only handle events with all of these tags.
Optional.

[[plugins-filters-useragent-target]]
===== `target` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

The name of the field to assign user agent data into.

If not specified user agent data will be stored in the root of the event.

[[plugins-filters-useragent-type]]
===== `type`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<string,string>>
  * Default value is `""`

Note that all of the specified routing options (`type`,`tags`,`exclude_tags`,`include_fields`,
`exclude_fields`) must be met in order for the event to be handled by the filter.
The type to act on. If a type is given, then this filter will only
act on messages with the same type. See any input plugin's `type`
attribute for more.
Optional.


