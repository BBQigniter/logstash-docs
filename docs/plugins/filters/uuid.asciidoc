[[plugins-filters-uuid]]
=== uuid

* Version: 3.0.2
* Released on: 2016-07-14
* https://github.com/logstash-plugins/logstash-filter-uuid/blob/master/CHANGELOG.md#302[Changelog]



The uuid filter allows you to add a `UUID` field to messages.
This is useful to be able to control the `_id` messages are indexed into Elasticsearch
with, so that you can insert duplicate messages (i.e. the same message multiple times
without creating duplicates) - for log pipeline reliability


&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
uuid {
    target => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-uuid-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-uuid-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-uuid-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-uuid-id>> |<<string,string>>|No|
| <<plugins-filters-uuid-overwrite>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-uuid-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-uuid-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-uuid-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-uuid-target>> |<<string,string>>|Yes|
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-uuid-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      uuid {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      uuid {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-uuid-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      uuid {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      uuid {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-uuid-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-uuid-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin configuration. If no ID is specified, Logstash will generate one. 
It is strongly recommended to set this ID in your configuration. This is particularly useful 
when you have two or more plugins of the same type, for example, if you have 2 grok filters. 
Adding a named ID in this case will help in monitoring Logstash when using the monitoring APIs.

[source,ruby]
---------------------------------------------------------------------------------------------------
output {
 stdout {
   id => "my_plugin_id"
 }
}
---------------------------------------------------------------------------------------------------


[[plugins-filters-uuid-overwrite]]
===== `overwrite` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

If the value in the field currently (if any) should be overridden
by the generated UUID. Defaults to `false` (i.e. if the field is
present, with ANY value, it won't be overridden)

Example:
[source,ruby]
   filter {
      uuid {
        target    => "@uuid"
        overwrite => true
      }
   }

[[plugins-filters-uuid-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-uuid-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      uuid {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      uuid {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-uuid-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      uuid {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      uuid {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-uuid-target]]
===== `target` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a UUID to a field.

Example:
[source,ruby]
    filter {
      uuid {
        target => "@uuid"
      }
    }


