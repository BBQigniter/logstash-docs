[[plugins-filters-prune]]
=== prune

* Version: 3.0.0
* Released on: 2017-01-04
* https://github.com/logstash-plugins/logstash-filter-prune/blob/master/CHANGELOG.md#300[Changelog]



NOTE: This plugin does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-prune`.


The prune filter is for removing fields from events based on
whitelists or blacklist of field names or their values (names and
values can also be regular expressions).

This can e.g. be useful if you have a <<plugins-filters-json,json>>
or <<plugins-filters-kv,kv>> filter that creates a number of fields
with names that you don't necessarily know the names of beforehand,
and you only want to keep a subset of them.

Usage help:
To specify a exact field name or value use the regular expression syntax `^some_name_or_value$`.
Example usage: Input data `{ "msg":"hello world", "msg_short":"hw" }`
[source,ruby]
    filter {
      prune {
        whitelist_names => [ "msg" ]
      }
    }
Allows both `"msg"` and `"msg_short"` through.

While:
[source,ruby]
    filter {
      prune {
        whitelist_names => ["^msg$"]
      }
    }
Allows only `"msg"` through.

Logstash stores an event's `tags` as a field which is subject to pruning. Remember to `whitelist_names => [ "^tags$" ]`
to maintain `tags` after pruning or use `blacklist_values => [ "^tag_name$" ]` to eliminate a specific `tag`.

NOTE: This filter currently only support operations on top-level fields,
i.e. whitelisting and blacklisting of subfields based on name or value
does not work.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
prune {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-prune-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-prune-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-prune-blacklist_names>> |<<array,array>>|No|`["%{[^}]+}"]`
| <<plugins-filters-prune-blacklist_values>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-prune-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-prune-id>> |<<string,string>>|No|
| <<plugins-filters-prune-interpolate>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-prune-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-prune-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-prune-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-prune-whitelist_names>> |<<array,array>>|No|`[]`
| <<plugins-filters-prune-whitelist_values>> |<<hash,hash>>|No|`{}`
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-prune-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      prune {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      prune {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-prune-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      prune {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      prune {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-prune-blacklist_names]]
===== `blacklist_names` 

  * Value type is <<array,array>>
  * Default value is `["%{[^}]+}"]`

Exclude fields whose names match specified regexps, by default exclude unresolved `%{field}` strings.
[source,ruby]
    filter {
      prune {
        blacklist_names => [ "method", "(referrer|status)", "${some}_field" ]
      }
    }

[[plugins-filters-prune-blacklist_values]]
===== `blacklist_values` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Exclude specified fields if their values match one of the supplied regular expressions.
In case field values are arrays, each array item is matched against the regular expressions and matching array items will be excluded.
[source,ruby]
    filter {
      prune {
        blacklist_values => [ "uripath", "/index.php",
                              "method", "(HEAD|OPTIONS)",
                              "status", "^[^2]" ]
      }
    }

[[plugins-filters-prune-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-prune-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin instance, this `ID` is used for tracking
information for a specific configuration of the plugin.

```
output {
 stdout {
   id => "ABC"
 }
}
```

If you don't explicitely set this variable Logstash will generate a unique name.

[[plugins-filters-prune-interpolate]]
===== `interpolate` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Trigger whether configuration fields and values should be interpolated for
dynamic values (when resolving `%{some_field}`).
Probably adds some performance overhead. Defaults to false.

[[plugins-filters-prune-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-prune-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      prune {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      prune {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-prune-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      prune {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      prune {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-prune-whitelist_names]]
===== `whitelist_names` 

  * Value type is <<array,array>>
  * Default value is `[]`

Include only fields only if their names match specified regexps, default to empty list which means include everything.
[source,ruby]
    filter {
      prune {
        whitelist_names => [ "method", "(referrer|status)", "${some}_field" ]
      }
    }

[[plugins-filters-prune-whitelist_values]]
===== `whitelist_values` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Include specified fields only if their values match one of the supplied regular expressions.
In case field values are arrays, each array item is matched against the regular expressions and only matching array items will be included.
[source,ruby]
    filter {
      prune {
        whitelist_values => [ "uripath", "/index.php",
                              "method", "(GET|POST)",
                              "status", "^[^2]" ]
      }
    }


