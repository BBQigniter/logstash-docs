[[plugins-codecs-protobuf]]
=== protobuf

* Version: 1.0.0
* Released on: December 4, 2016
* https://github.com/logstash-plugins/logstash-codec-protobuf/blob/master/CHANGELOG.md#100[Changelog]


==== Installation

For plugins not bundled by default, it is easy to install by running `bin/logstash-plugin install logstash-codec-protobuf`. See <<working-with-plugins>> for more details.


==== Getting Help

For questions about the plugin, open a topic in the http://discuss.elastic.co[Discuss] forums. For bugs or feature requests, open an issue in https://github.com/elastic/logstash[Github].
For the list of Elastic supported plugins, please consult the https://www.elastic.co/support/matrix#show_logstash_plugins[Elastic Support Matrix].

==== Description

This codec converts protobuf encoded messages into logstash events and vice versa. 

Requires the protobuf definitions as ruby files. You can create those using the [ruby-protoc compiler](https://github.com/codekitchen/ruby-protocol-buffers).

The following shows a usage example for decoding events from a kafka stream:
[source,ruby]
kafka 
{
 zk_connect => "127.0.0.1"
 topic_id => "your_topic_goes_here"
 codec => protobuf 
 {
   class_name => "Animal::Unicorn"
   include_path => ['/path/to/protobuf/definitions/UnicornProtobuf.pb.rb']
 }
}


&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
protobuf {
      class_name => ...
      include_path => ...
  }
--------------------------



Available configuration options:

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-codecs-protobuf-class_name>> |<<string,string>>|Yes
| <<plugins-codecs-protobuf-enable_metric>> |<<boolean,boolean>>|No
| <<plugins-codecs-protobuf-id>> |<<string,string>>|No
| <<plugins-codecs-protobuf-include_path>> |<<array,array>>|Yes
|=======================================================================


==== Details

&nbsp;

[[plugins-codecs-protobuf-class_name]]
===== `class_name` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

Name of the class to decode.
If your protobuf definition contains modules, prepend them to the class name with double colons like so:
[source,ruby]
class_name => "Foods::Dairy::Cheese"

This corresponds to a protobuf definition starting as follows:
[source,ruby]
module Foods
   module Dairy
       class Cheese
           # here are your field definitions.

If your class references other definitions: you only have to add the main class here.

[[plugins-codecs-protobuf-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-codecs-protobuf-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin configuration. If no ID is specified, Logstash will generate one. 
It is strongly recommended to set this ID in your configuration. This is particulary useful 
when you have two or more plugins of the same type, for example, if you have 2 grok filters. 
Adding a named ID in this case will help in monitoring Logstash when using the monitoring APIs.

[source,ruby]
---------------------------------------------------------------------------------------------------
output {
 stdout {
   id => "my_plugin_id"
 }
}
---------------------------------------------------------------------------------------------------


[[plugins-codecs-protobuf-include_path]]
===== `include_path` 

  * This is a required setting.
  * Value type is <<array,array>>
  * There is no default value for this setting.

List of absolute pathes to files with protobuf definitions. 
When using more than one file, make sure to arrange the files in reverse order of dependency so that each class is loaded before it is 
refered to by another.

Example: a class _Cheese_ referencing another protobuf class _Milk_
[source,ruby]
module Foods
  module Dairy
        class Cheese
           set_fully_qualified_name "Foods.Dairy.Cheese"
           optional ::Foods::Cheese::Milk, :milk, 1
           optional :int64, :unique_id, 2
           # here be more field definitions

would be configured as
[source,ruby]
include_path => ['/path/to/protobuf/definitions/Milk.pb.rb','/path/to/protobuf/definitions/Cheese.pb.rb']

When using the codec in an output plugin: 
* make sure to include all the desired fields in the protobuf definition, including timestamp. 
  Remove fields that are not part of the protobuf definition from the event by using the mutate filter.
* the @ symbol is currently not supported in field names when loading the protobuf definitions for encoding. Make sure to call the timestamp field "timestamp" 
  instead of "@timestamp" in the protobuf file. Logstash event fields will be stripped of the leading @ before conversion.
 


