[[plugins-inputs-beats]]
=== beats

This input plugin enables Logstash to receive events
from the https://www.elastic.co/products/beats[Elastic Beats] framework.

The following example shows how to configure Logstash to listen on port
5044 for incoming Beats connections and to index into Elasticsearch:

[source,ruby]
------------------------------------------------------------------------------
input {
  beats {
    port => 5044
  }
}

output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
}
------------------------------------------------------------------------------

NOTE: The Beats shipper automatically sets the `type` field on the event.
You cannot override this setting in the Logstash config. If you specify
a setting for the <<plugins-inputs-beats-type,`type`>> config option in
Logstash, it is ignored.


==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
beats {
    port => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-beats-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-beats-cipher_suites>> |<<array,array>>|No|`java.lang.String[TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256]@16f8ee2b`
| <<plugins-inputs-beats-client_inactivity_timeout>> |<<number,number>>|No|`60`
| <<plugins-inputs-beats-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-inputs-beats-congestion_threshold>> |<<number,number>>|No|`5`
| <<plugins-inputs-beats-host>> |<<string,string>>|No|`"0.0.0.0"`
| <<plugins-inputs-beats-port>> |<<number,number>>|Yes|
| <<plugins-inputs-beats-ssl>> |<<boolean,boolean>>|No|`false`
| <<plugins-inputs-beats-ssl_certificate>> |a valid filesystem path|No|
| <<plugins-inputs-beats-ssl_certificate_authorities>> |<<array,array>>|No|`[]`
| <<plugins-inputs-beats-ssl_key>> |a valid filesystem path|No|
| <<plugins-inputs-beats-ssl_key_passphrase>> |<<password,password>>|No|
| <<plugins-inputs-beats-ssl_verify_mode>> |<<string,string>>, one of `["none", "peer", "force_peer"]`|No|`"none"`
| <<plugins-inputs-beats-tags>> |<<array,array>>|No|
| <<plugins-inputs-beats-target_field_for_codec>> |<<string,string>>|No|`"message"`
| <<plugins-inputs-beats-type>> |<<string,string>>|No|
|=======================================================================



==== Details

&nbsp;

[[plugins-inputs-beats-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

<<<<<<< HEAD
=======
[[plugins-inputs-beats-cipher_suites]]
===== `cipher_suites` 

  * Value type is <<array,array>>
  * Default value is `java.lang.String[TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256]@16f8ee2b`

The list of ciphers suite to use, listed by priorities.

[[plugins-inputs-beats-client_inactivity_timeout]]
===== `client_inactivity_timeout` 

  * Value type is <<number,number>>
  * Default value is `60`

Close Idle clients after X seconds of inactivity.

>>>>>>> d1a1fbc... Update input docs
[[plugins-inputs-beats-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-beats-congestion_threshold]]
===== `congestion_threshold` 

  * Value type is <<number,number>>
  * Default value is `5`

The number of seconds before we raise a timeout. 
This option is useful to control how much time to wait if something is blocking the pipeline.

<<<<<<< HEAD
=======
[[plugins-inputs-beats-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric collection and reporting for this specific plugin instance. 
By default we record metrics from all plugins, but you can disable metrics collection
for a specific plugin.

>>>>>>> d1a1fbc... Update input docs
[[plugins-inputs-beats-host]]
===== `host` 

  * Value type is <<string,string>>
  * Default value is `"0.0.0.0"`

The IP address to listen on.

<<<<<<< HEAD
=======
[[plugins-inputs-beats-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique named `ID` to the plugin instance. This `ID` is used for tracking
information for a specific configuration of the plugin and will be useful for 
debugging purposes.

[source,sh]
--------------------------------------------------
output {
 stdout {
   id => "debug_stdout"
 }
}
--------------------------------------------------

If you don't explicitly set this field, Logstash will generate a unique name.

[[plugins-inputs-beats-include_codec_tag]]
===== `include_codec_tag` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`



>>>>>>> d1a1fbc... Update input docs
[[plugins-inputs-beats-port]]
===== `port` 

  * This is a required setting.
  * Value type is <<number,number>>
  * There is no default value for this setting.

The port to listen on.

[[plugins-inputs-beats-ssl]]
===== `ssl` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Events are by default sent in plain text. You can
enable encryption by setting `ssl` to true and configuring
the `ssl_certificate` and `ssl_key` options.

[[plugins-inputs-beats-ssl_certificate]]
===== `ssl_certificate` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

SSL certificate to use.

[[plugins-inputs-beats-ssl_certificate_authorities]]
===== `ssl_certificate_authorities` 

  * Value type is <<array,array>>
  * Default value is `[]`

Validate client certificates against these authorities
You can define multiple files or path. All the certificates will
be read and added to the trust store. You need to configure the `ssl_verify_mode`
to `peer` or `force_peer` to enable the verification.

This feature only supports certificates that are directly signed by your root CA.
Intermediate CA are currently not supported.


[[plugins-inputs-beats-ssl_key]]
===== `ssl_key` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

SSL key to use.

[[plugins-inputs-beats-ssl_key_passphrase]]
===== `ssl_key_passphrase` 

  * Value type is <<password,password>>
  * There is no default value for this setting.

SSL key passphrase to use.

[[plugins-inputs-beats-ssl_verify_mode]]
===== `ssl_verify_mode` 

  * Value can be any of: `none`, `peer`, `force_peer`
  * Default value is `"none"`

By default the server doesn't do any client verification,

`peer` will make the server ask the client to provide a certificate,
if the client provides a certificate it will be validated.

`force_peer` will make the server ask the client to provide a certificate. If the client
doesn't provide a certificate, the connection will be closed.

This option needs to be used with `ssl_certificate_authorities` and a defined list of CA.

[[plugins-inputs-beats-tags]]
===== `tags` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-beats-target_field_for_codec]]
===== `target_field_for_codec` 

  * Value type is <<string,string>>
  * Default value is `"message"`

This is the default field to which the specified codec will be applied.

[[plugins-inputs-beats-type]]
===== `type` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.


