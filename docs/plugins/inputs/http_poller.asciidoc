[[plugins-inputs-http_poller]]
=== http_poller

* Version: 3.1.0
* Released on: 2016-08-14
* https://github.com/logstash-plugins/logstash-input-http_poller/blob/master/CHANGELOG.md#310[Changelog]
* Compatible: 5.1.2, 5.1.1, 5.0.0, 2.4.1, 2.4.0



This Logstash input plugin allows you to call an HTTP API, decode the output of it into event(s), and
send them on their merry way. The idea behind this plugins came from a need to read springboot
metrics endpoint, instead of configuring jmx to monitor my java application memory/gc/ etc.

==== Example
Reads from a list of urls and decodes the body of the response with a codec.
The config should look like this:

[source,ruby]
----------------------------------
input {
  http_poller {
    urls => {
      test1 => "http://localhost:9200"
      test2 => {
        # Supports all options supported by ruby's Manticore HTTP client
        method => get
        url => "http://localhost:9200/_cluster/health"
        headers => {
          Accept => "application/json"
        }
        auth => {
          user => "AzureDiamond"
          password => "hunter2"
        }
      }
    }
    request_timeout => 60
    # Supports "cron", "every", "at" and "in" schedules by rufus scheduler
    schedule => { cron => "* * * * * UTC"}
    codec => "json"
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    metadata_target => "http_poller_metadata"
  }
}

output {
  stdout {
    codec => rubydebug
  }
}
----------------------------------

Using the HTTP poller with custom a custom CA or self signed cert.

If you have a self signed cert you will need to convert your server's certificate to a valid# `.jks` or `.p12` file. An easy way to do it is to run the following one-liner, substituting your server's URL for the placeholder `MYURL` and `MYPORT`.

[source,ruby]
----------------------------------
openssl s_client -showcerts -connect MYURL:MYPORT </dev/null 2>/dev/null|openssl x509 -outform PEM > downloaded_cert.pem; keytool -import -alias test -file downloaded_cert.pem -keystore downloaded_truststore.jks
----------------------------------

The above snippet will create two files `downloaded_cert.pem` and `downloaded_truststore.jks`. You will be prompted to set a password for the `jks` file during this process. To configure logstash use a config like the one that follows.


[source,ruby]
----------------------------------
 http_poller {
   urls => {
     myurl => "https://myhostname:1234"
   }
   truststore => "/path/to/downloaded_truststore.jks"
   truststore_password => "mypassword"
   interval => 30
 }
----------------------------------


&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
http_poller {
    urls => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-http_poller-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-http_poller-automatic_retries>> |<<number,number>>|No|`1`
| <<plugins-inputs-http_poller-cacert>> |a valid filesystem path|No|
| <<plugins-inputs-http_poller-client_cert>> |a valid filesystem path|No|
| <<plugins-inputs-http_poller-client_key>> |a valid filesystem path|No|
| <<plugins-inputs-http_poller-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-inputs-http_poller-connect_timeout>> |<<number,number>>|No|`10`
| <<plugins-inputs-http_poller-cookies>> |<<boolean,boolean>>|No|`true`
| <<plugins-inputs-http_poller-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-inputs-http_poller-follow_redirects>> |<<boolean,boolean>>|No|`true`
| <<plugins-inputs-http_poller-id>> |<<string,string>>|No|
| <<plugins-inputs-http_poller-keepalive>> |<<boolean,boolean>>|No|`true`
| <<plugins-inputs-http_poller-keystore>> |a valid filesystem path|No|
| <<plugins-inputs-http_poller-keystore_password>> |<<password,password>>|No|
| <<plugins-inputs-http_poller-keystore_type>> |<<string,string>>|No|`"JKS"`
| <<plugins-inputs-http_poller-metadata_target>> |<<string,string>>|No|`"@metadata"`
| <<plugins-inputs-http_poller-pool_max>> |<<number,number>>|No|`50`
| <<plugins-inputs-http_poller-pool_max_per_route>> |<<number,number>>|No|`25`
| <<plugins-inputs-http_poller-proxy>> |<<,>>|No|
| <<plugins-inputs-http_poller-request_timeout>> |<<number,number>>|No|`60`
| <<plugins-inputs-http_poller-retry_non_idempotent>> |<<boolean,boolean>>|No|`false`
| <<plugins-inputs-http_poller-schedule>> |<<hash,hash>>|No|
| <<plugins-inputs-http_poller-socket_timeout>> |<<number,number>>|No|`10`
| <<plugins-inputs-http_poller-ssl_certificate_validation>> |<<boolean,boolean>>|No|`true`
| <<plugins-inputs-http_poller-tags>> |<<array,array>>|No|
| <<plugins-inputs-http_poller-target>> |<<string,string>>|No|
| <<plugins-inputs-http_poller-truststore>> |a valid filesystem path|No|
| <<plugins-inputs-http_poller-truststore_password>> |<<password,password>>|No|
| <<plugins-inputs-http_poller-truststore_type>> |<<string,string>>|No|`"JKS"`
| <<plugins-inputs-http_poller-type>> |<<string,string>>|No|
| <<plugins-inputs-http_poller-urls>> |<<hash,hash>>|Yes|
| <<plugins-inputs-http_poller-validate_after_inactivity>> |<<number,number>>|No|`200`
|=======================================================================


==== Details

&nbsp;

[[plugins-inputs-http_poller-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

[[plugins-inputs-http_poller-automatic_retries]]
===== `automatic_retries` 

  * Value type is <<number,number>>
  * Default value is `1`

How many times should the client retry a failing URL. We highly recommend NOT setting this value
to zero if keepalive is enabled. Some servers incorrectly end keepalives early requiring a retry!
Note: if `retry_non_idempotent` is set only GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests will be retried.

[[plugins-inputs-http_poller-cacert]]
===== `cacert` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

If you need to use a custom X.509 CA (.pem certs) specify the path to that here

[[plugins-inputs-http_poller-client_cert]]
===== `client_cert` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

If you'd like to use a client certificate (note, most people don't want this) set the path to the x509 cert here

[[plugins-inputs-http_poller-client_key]]
===== `client_key` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

If you're using a client certificate specify the path to the encryption key here

[[plugins-inputs-http_poller-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-http_poller-connect_timeout]]
===== `connect_timeout` 

  * Value type is <<number,number>>
  * Default value is `10`

Timeout (in seconds) to wait for a connection to be established. Default is `10s`

[[plugins-inputs-http_poller-cookies]]
===== `cookies` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Enable cookie support. With this enabled the client will persist cookies
across requests as a normal web browser would. Enabled by default

[[plugins-inputs-http_poller-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric collection and reporting for this specific plugin instance. 
By default we record metrics from all plugins, but you can disable metrics collection
for a specific plugin.

[[plugins-inputs-http_poller-follow_redirects]]
===== `follow_redirects` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Should redirects be followed? Defaults to `true`

[[plugins-inputs-http_poller-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique named `ID` to the plugin instance. This `ID` is used for tracking
information for a specific configuration of the plugin and will be useful for 
debugging purposes.

[source,sh]
--------------------------------------------------
output {
 stdout {
   id => "debug_stdout"
 }
}
--------------------------------------------------

If you don't explicitly set this field, Logstash will generate a unique name.

[[plugins-inputs-http_poller-interval]]
===== `interval`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<number,number>>
  * There is no default value for this setting.

How often (in seconds) the urls will be called
DEPRECATED. Use 'schedule' option instead.
If both interval and schedule options are specified, interval
option takes higher precedence

[[plugins-inputs-http_poller-keepalive]]
===== `keepalive` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Turn this on to enable HTTP keepalive support. We highly recommend setting `automatic_retries` to at least
one with this to fix interactions with broken keepalive implementations.

[[plugins-inputs-http_poller-keystore]]
===== `keystore` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

If you need to use a custom keystore (`.jks`) specify that here. This does not work with .pem keys!

[[plugins-inputs-http_poller-keystore_password]]
===== `keystore_password` 

  * Value type is <<password,password>>
  * There is no default value for this setting.

Specify the keystore password here.
Note, most .jks files created with keytool require a password!

[[plugins-inputs-http_poller-keystore_type]]
===== `keystore_type` 

  * Value type is <<string,string>>
  * Default value is `"JKS"`

Specify the keystore type here. One of `JKS` or `PKCS12`. Default is `JKS`

[[plugins-inputs-http_poller-metadata_target]]
===== `metadata_target` 

  * Value type is <<string,string>>
  * Default value is `"@metadata"`

If you'd like to work with the request/response metadata.
Set this value to the name of the field you'd like to store a nested
hash of metadata.

[[plugins-inputs-http_poller-pool_max]]
===== `pool_max` 

  * Value type is <<number,number>>
  * Default value is `50`

Max number of concurrent connections. Defaults to `50`

[[plugins-inputs-http_poller-pool_max_per_route]]
===== `pool_max_per_route` 

  * Value type is <<number,number>>
  * Default value is `25`

Max number of concurrent connections to a single host. Defaults to `25`

[[plugins-inputs-http_poller-proxy]]
===== `proxy` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

If you'd like to use an HTTP proxy . This supports multiple configuration syntaxes:

1. Proxy host in form: `http://proxy.org:1234`
2. Proxy host in form: `{host => "proxy.org", port => 80, scheme => 'http', user => 'username@host', password => 'password'}`
3. Proxy host in form: `{url =>  'http://proxy.org:1234', user => 'username@host', password => 'password'}`

[[plugins-inputs-http_poller-request_timeout]]
===== `request_timeout` 

  * Value type is <<number,number>>
  * Default value is `60`

Timeout (in seconds) for the entire request

[[plugins-inputs-http_poller-retry_non_idempotent]]
===== `retry_non_idempotent` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

If `automatic_retries` is enabled this will cause non-idempotent HTTP verbs (such as POST) to be retried.

[[plugins-inputs-http_poller-schedule]]
===== `schedule` 

  * Value type is <<hash,hash>>
  * There is no default value for this setting.

Schedule of when to periodically poll from the urls
Format: A hash with
  + key: "cron" | "every" | "in" | "at"
  + value: string
Examples:
  a) { "every" => "1h" }
  b) { "cron" => "* * * * * UTC" }
See: rufus/scheduler for details about different schedule options and value string format

[[plugins-inputs-http_poller-socket_timeout]]
===== `socket_timeout` 

  * Value type is <<number,number>>
  * Default value is `10`

Timeout (in seconds) to wait for data on the socket. Default is `10s`

[[plugins-inputs-http_poller-ssl_certificate_validation]]
===== `ssl_certificate_validation` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Set this to false to disable SSL/TLS certificate validation
Note: setting this to false is generally considered insecure!

[[plugins-inputs-http_poller-tags]]
===== `tags` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-http_poller-target]]
===== `target` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Define the target field for placing the received data. If this setting is omitted, the data will be stored at the root (top level) of the event.

[[plugins-inputs-http_poller-truststore]]
===== `truststore` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

If you need to use a custom truststore (`.jks`) specify that here. This does not work with .pem certs!

[[plugins-inputs-http_poller-truststore_password]]
===== `truststore_password` 

  * Value type is <<password,password>>
  * There is no default value for this setting.

Specify the truststore password here.
Note, most .jks files created with keytool require a password!

[[plugins-inputs-http_poller-truststore_type]]
===== `truststore_type` 

  * Value type is <<string,string>>
  * Default value is `"JKS"`

Specify the truststore type here. One of `JKS` or `PKCS12`. Default is `JKS`

[[plugins-inputs-http_poller-type]]
===== `type` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.

[[plugins-inputs-http_poller-urls]]
===== `urls` 

  * This is a required setting.
  * Value type is <<hash,hash>>
  * There is no default value for this setting.

A Hash of urls in this format : `"name" => "url"`.
The name and the url will be passed in the outputed event

[[plugins-inputs-http_poller-validate_after_inactivity]]
===== `validate_after_inactivity` 

  * Value type is <<number,number>>
  * Default value is `200`

How long to wait before checking if the connection is stale before executing a request on a connection using keepalive.
# You may want to set this lower, possibly to 0 if you get connection errors regularly
Quoting the Apache commons docs (this client is based Apache Commmons):
'Defines period of inactivity in milliseconds after which persistent connections must be re-validated prior to being leased to the consumer. Non-positive value passed to this method disables connection validation. This check helps detect connections that have become stale (half-closed) while kept inactive in the pool.'
See https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/conn/PoolingHttpClientConnectionManager.html#setValidateAfterInactivity(int)[these docs for more info]


