== Adding a filter to Logstash

To add a filter to Logstash, you need to:

. Write code to extend the  LogStash::Filters::Base class.
. Tell Logstash about your new filter.

For a general overview of how to add plugins, see [the extending Logstash](.) overview.

[float]
=== Write code.

Let's write a 'hello world' filter. This filter replaces the 'message' in an event with "Hello world!"

Logstash expects plugins to be in a certain directory structure: `logstash/TYPE/PLUGIN_NAME.rb`, 
so first create a directory where you can store the new filter.

[source,js]
----------------------------------
mkdir -p logstash/filters/
cd logstash/filters
----------------------------------

Now save the following code to a file called `foo.rb` in the `logstash/filters` directory.

[source,js]
----------------------------------
require "logstash/filters/base"
require "logstash/namespace"

class LogStash::Filters::Foo < LogStash::Filters::Base

  # Setting the config_name here is required. This is how you
  # configure this filter from your Logstash config.
  #
  # filter {
  #   foo { ... }
  # }
  config_name "foo"

  # New plugins should start life at milestone 1.
  milestone 1

  # Replace the message with this value.
  config :message, :validate => :string

  public
    def register
    # nothing to do
  end # def register

  public
    def filter(event)

      if @message
        # Replace the event message with our message as configured in the
        # config file.
        event["message"] = @message
      end

      # filter_matched should go in the last line of our successful code 
      filter_matched(event)
    end # def filter
  end # class LogStash::Filters::Foo

  ## Add it to your configuration
----------------------------------

Create a configuration file called `example.conf` that uses the new filter. You
can just use stdin input and stdout output.

[source,js]
----------------------------------
input { 
  stdin { type => "foo" } 
}
filter {
  if [type] == "foo" {
    foo {
      message => "Hello world!"
    }
  }
}
output {
  stdout { }
}
----------------------------------

[float]
=== Tell Logstash about it.

You can use the agent flag `--pluginpath` flag to specify where the root of your
plugin tree is. In this example, it's the current directory.

[source,js]
----------------------------------
% bin/logstash --pluginpath your/plugin/root -f example.conf
----------------------------------

Now, the message text you input is transformed by the `foo` filter. For example: 

[source,js]
----------------------------------
the quick brown fox   
2011-05-12T01:05:09.495000Z mylocalhost: Hello world!
----------------------------------

The output is the standard Logstash stdout output, but the "the quick brown fox" message is replaced with "Hello world!"
